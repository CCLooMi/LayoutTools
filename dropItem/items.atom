<div icon="form">
    <script inject="$modal">
        console.log([$event,undoList,style,body,ce,cdf]);
        const target=$event.target;
        const app = Atom.app('LayoutTools');
        const scope = {types:['v']};
        scope.code=function (){
            return `<cc-form ${scope.types.filter(i=>i).join(' ')}></cc-form>`;
        }
        $modal.dialog()
            .content(app.getPaths('views/modal/form.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                target.html(scope.code());
                undoList.push(function (){
                    target.html('');
                });
            });
    </script>
</div>
<div icon="input">
    <script inject="$modal,$formCheck">
        console.log([$formCheck]);
        const target = $event.target;
        const app = Atom.app('LayoutTools');
        const sd = target.shadowRoot||target;
        const scope = {
            checkList:Object.keys($formCheck),
            checks:[],
            checkArgs:[],
            checkTips:[],
            type:'input',
            dataType: 'text',
            rangeMin:0,
            rangeMax:100,
        };
        scope.setChecks=function (){
            $modal.dialog()
            .content(app.getPaths('views/modal/formChecks.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){})
            .cancel(function (){
                scope.checks.length=0;
            });
        };
        body = `<form-group>
    <label>{{label}}</label>
    <form-input>
        <input{{attrStr?' '+attrStr:''}}>
    </form-input>
</form-group>`;
        const body2=`<form-group>
    <label>{{label}}</label>
    <form-input>
        <textarea{{attrStr?' '+attrStr:''}}></textarea>
    </form-input>
</form-group>`;
        const tmp = Atom.JST.parse(body);
        const tmp2 = Atom.JST.parse(body2);
        scope.code=function (){
            const attrStrs = [];
            if(scope.type!='textarea'){
                attrStrs.push(`type="${scope.dataType}"`);
            }
            attrStrs.push(`placeholder="${scope.placeholder}"`,`cc-model="${scope.name}"`);
            if(scope.dataType=='range'){
                attrStrs.push(`min="${scope.rangeMin||0}"`,`max="${scope.rangeMax||100}"`)
            }
            scope.checks.forEach((c,i)=>{
                if(c){
                    attrStrs.push(`${c}="${scope.checkArgs[i]||''}:${scope.checkTips[i]||''}"`);
                }
            });
            const o = {attrStr:attrStrs.join(' '),parent:scope};
            if(scope.type=='input'){
                return tmp(o);
            }
            return tmp2(o);
        }
        const unwatch = Atom.watchChange(scope,'name',function (ov,nv,tg){
            if(ov?.toLowerCase()==scope.label?.toLowerCase()){
                scope.label=upperCaseFirst(nv);
            }
            if(ov==scope.placeholder){
                scope.placeholder=nv;
            }
        });
        switch(target.localName){
            case 'cc-form':
            var form = sd.findOne('form');
            if(!form){
                form = ce('form');
                sd.append(form);
            }
            $modal.dialog()
            .content(app.getPaths('views/modal/input.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                unwatch();
                const nds = Atom.toNodes(scope.code());
                const list = [...nds];
                form.append(...nds);
                undoList.push(function (){
                    list.forEach(nd=>nd.remove());
                    list.length=0;
                });
            })
            .cancel(function (){
                unwatch();
            });
            break;
        }
    </script>
</div>
<div icon="select">
    <script inject="$modal,$formCheck">
        const target = $event.target;
        const app = Atom.app('LayoutTools');
        const sd = target.shadowRoot||target;
        const scope = {
            checkList:Object.keys($formCheck),
            checks:[],
            checkArgs:[],
            checkTips:[],
        };
        scope.addOptions=function (){
            const unwatch = Atom.watchChange(scope,'use',function (ov,nv,obj){
                switch(nv){
                    case 'normal':
                    scope.exp='';
                    scope.optStr='<option value="xxx">xxxxx</option>';
                    break;
                    case 'cc-options':
                    scope.exp='u.id as u.name for u in users';
                    scope.optStr='';
                    break;
                    case 'cc-repeat':
                    scope.exp='';
                    scope.optStr=`<option cc-repeat="u in users" cc-value="u">{{u.name}}</option>`;
                    break;
                    case 'cc-for':
                    scope.exp='u in users';
                    scope.optStr='<option cc-value="u">{{u.name}}</option>';
                    break;
                }
            })
            if(!scope.use){
                scope.use = 'normal';
            }
            $modal.dialog()
            .content(app.getPaths('views/modal/selectOption.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                unwatch();
            })
            .cancel(function (){
                unwatch();
                scope.exp='';
                scope.use='';
                scope.optStr='';
            });
        };
        scope.setChecks=function (){
            $modal.dialog()
            .content(app.getPaths('views/modal/formChecks.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){})
            .cancel(function (){
                scope.checks.length=0;
            });
        };
        body = `<form-group>
    <label>{{label}}</label>
    <form-input type="select">
        <select placeholder="{{placeholder}}" cc-model="{{name}}"{{exp?' '+use+'="'+exp+'"':''}}{{checkStr?' '+checkStr:''}}>
            {{optStr}}
        </select>
    </form-input>
</form-group>`;
        body2 = `<form-group>
    <label>{{label}}</label>
    <form-input type="select">
        <select placeholder="{{placeholder}}" cc-model="{{name}}"{{checkStr?' '+checkStr:''}}>
            {{optStr}}
        </select>
    </form-input>
</form-group>`;
        const tmp = Atom.JST.parse(body);
        const tmp2 = Atom.JST.parse(body);
        scope.code=function (){
            const checkStr=scope.checks.map((c,i)=>{if(c){return `${c}="${scope.checkArgs[i]||''}:${scope.checkTips[i]||''}"`}})
                    .filter(i=>i).join(' ');
            const o = {
                checkStr:checkStr,
                parent:scope,
            };
            if(scope.use=='cc-repeat'){
                return tmp2(o);
            }
            return tmp(o);
        }
        const unwatch = Atom.watchChange(scope,'name',function (ov,nv,tg){
            if(ov?.toLowerCase()==scope.label?.toLowerCase()){
                scope.label=upperCaseFirst(nv);
            }
            if(ov==scope.placeholder){
                scope.placeholder=nv;
            }
        });
        switch(target.localName){
            case 'cc-form':
            var form = sd.findOne('form');
            if(!form){
                form = ce('form');
                sd.append(form);
            }
            $modal.dialog()
            .content(app.getPaths('views/modal/select.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                unwatch();
                const nds = Atom.toNodes(scope.code());
                const list = [...nds];
                form.append(...nds);
                undoList.push(function (){
                    list.forEach(nd=>nd.remove());
                    list.length=0;
                });
            })
            .cancel(function (){
                unwatch();
            });
            break;
        }
    </script>
</div>
<div icon="checkbox">
    <script inject="$modal,$formCheck">
        const target = $event.target;
        const app = Atom.app('LayoutTools');
        const sd = target.shadowRoot||target;
        const scope = {
            checkList:Object.keys($formCheck),
            checks:[],
            checkArgs:[],
            checkTips:[],
        };
        function bak(obj,...ks){
            const o = {};
            ks.forEach(k=>{
                o[k]=obj[k];
            });
            return o;
        }
        function restore(obj,bakObj){
            for(var k in bakObj){
                obj[k]=bakObj[k];
            }
        }
        scope.addLabels=function (){
            const bakObj = bak(scope,'use','exp','labelStr');
            const unwatchUse = Atom.watchChange(scope,'use',function (ov,nv,tg){
                switch(nv){
                    case 'normal':
                    scope.exp='';
                    scope.labelStr=`<label><input type="checkbox" name="${scope.name}" value="xxx">xxxxx</label>`;
                    break;
                    case 'cc-repeat':
                    scope.exp='';
                    scope.labelStr=`<label cc-repeat="i in list"><input type="checkbox" name="${scope.name}" value="&i">xxxxx</label>`;
                    break;
                    case 'cc-for':
                    scope.exp='i in list';
                    scope.labelStr=`<label><input type="checkbox" name="${scope.name}" value="&i">xxxxx</label>`;
                    break;
                }
            })
            if(!scope.use){
                scope.use = 'normal';
            }

            $modal.dialog()
            .content(app.getPaths('views/modal/labels.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                unwatchUse()
            })
            .cancel(function (){
                unwatchUse();
                restore(scope,bakObj);
            });
        };
        scope.setChecks=function (){
            $modal.dialog()
            .content(app.getPaths('views/modal/formChecks.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){})
            .cancel(function (){
                scope.checks.length=0;
            });
        };
        body = `<form-group>
    <label>{{label}}</label>
    <form-input type="checkbox"{{exp?' '+use+'="'+exp+'"':''}}{{checkStr?' '+checkStr:''}}>
        {{labelStr}}
    </form-input>
</form-group>`;
        body2 = `<form-group>
    <label>{{label}}</label>
    <form-input type="checkbox"{{checkStr?' '+checkStr:''}}>
        {{labelStr}}
    </form-input>
</form-group>`;
        const tmp = Atom.JST.parse(body);
        const tmp2 = Atom.JST.parse(body2);
        scope.code=function (){
            const checkStr=scope.checks.map((c,i)=>{if(c){return `${c}="${scope.checkArgs[i]||''}:${scope.checkTips[i]||''}"`}})
                    .filter(i=>i).join(' ');
            const o = {
                checkStr:checkStr,
                parent:scope,
            };
            if(scope.use=='cc-repeat'){
                return tmp2(o);
            }
            return tmp(o);
        }
        const unwatch = Atom.watchChange(scope,'name',function (ov,nv,tg){
            if(ov?.toLowerCase()==scope.label?.toLowerCase()){
                scope.label=upperCaseFirst(nv);
            }
            if(ov==scope.placeholder){
                scope.placeholder=nv;
            }
        });
        switch(target.localName){
            case 'cc-form':
            var form = sd.findOne('form');
            if(!form){
                form = ce('form');
                sd.append(form);
            }
            $modal.dialog()
            .content(app.getPaths('views/modal/checkbox.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                unwatch();
                const nds = Atom.toNodes(scope.code());
                const list = [...nds];
                form.append(...nds);
                undoList.push(function (){
                    list.forEach(nd=>nd.remove());
                    list.length=0;
                });
            })
            .cancel(function (){
                unwatch();
            });
            break;
        }
    </script>
</div>
<div icon="radio">
    <script inject="$modal,$formCheck">
        const target = $event.target;
        const app = Atom.app('LayoutTools');
        const sd = target.shadowRoot||target;
        const scope = {
            checkList:Object.keys($formCheck),
            checks:[],
            checkArgs:[],
            checkTips:[],
        };
        function bak(obj,...ks){
            const o = {};
            ks.forEach(k=>{
                o[k]=obj[k];
            });
            return o;
        }
        function restore(obj,bakObj){
            for(var k in bakObj){
                obj[k]=bakObj[k];
            }
        }
        scope.addLabels=function (){
            const bakObj = bak(scope,'use','exp','labelStr');
            const unwatchUse = Atom.watchChange(scope,'use',function (ov,nv,tg){
                switch(nv){
                    case 'normal':
                    scope.exp='';
                    scope.labelStr=`<label><input type="radio" name="${scope.name}" value="xxx">xxxxx</label>`;
                    break;
                    case 'cc-repeat':
                    scope.exp='';
                    scope.labelStr=`<label cc-repeat="i in list"><input type="radio" name="${scope.name}" value="&i">xxxxx</label>`;
                    break;
                    case 'cc-for':
                    scope.exp='i in list';
                    scope.labelStr=`<label><input type="radio" name="${scope.name}" value="&i">xxxxx</label>`;
                    break;
                }
            })
            if(!scope.use){
                scope.use = 'normal';
            }

            $modal.dialog()
            .content(app.getPaths('views/modal/labels.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                unwatchUse()
            })
            .cancel(function (){
                unwatchUse();
                restore(scope,bakObj);
            });
        };
        scope.setChecks=function (){
            $modal.dialog()
            .content(app.getPaths('views/modal/formChecks.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){})
            .cancel(function (){
                scope.checks.length=0;
            });
        };
        body = `<form-group>
    <label>{{label}}</label>
    <form-input type="checkbox"{{exp?' '+use+'="'+exp+'"':''}}{{checkStr?' '+checkStr:''}}>
        {{labelStr}}
    </form-input>
</form-group>`;
        body2 = `<form-group>
    <label>{{label}}</label>
    <form-input type="checkbox"{{checkStr?' '+checkStr:''}}>
        {{labelStr}}
    </form-input>
</form-group>`;
        const tmp = Atom.JST.parse(body);
        const tmp2 = Atom.JST.parse(body2);
        scope.code=function (){
            const checkStr=scope.checks.map((c,i)=>{if(c){return `${c}="${scope.checkArgs[i]||''}:${scope.checkTips[i]||''}"`}})
                    .filter(i=>i).join(' ');
            const o = {
                checkStr:checkStr,
                parent:scope,
            };
            if(scope.use=='cc-repeat'){
                return tmp2(o);
            }
            return tmp(o);
        }
        const unwatch = Atom.watchChange(scope,'name',function (ov,nv,tg){
            if(ov?.toLowerCase()==scope.label?.toLowerCase()){
                scope.label=upperCaseFirst(nv);
            }
            if(ov==scope.placeholder){
                scope.placeholder=nv;
            }
        });
        switch(target.localName){
            case 'cc-form':
            var form = sd.findOne('form');
            if(!form){
                form = ce('form');
                sd.append(form);
            }
            $modal.dialog()
            .content(app.getPaths('views/modal/checkbox.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                unwatch();
                const nds = Atom.toNodes(scope.code());
                const list = [...nds];
                form.append(...nds);
                undoList.push(function (){
                    list.forEach(nd=>nd.remove());
                    list.length=0;
                });
            })
            .cancel(function (){
                unwatch();
            });
            break;
        }
    </script>
</div>
<div icon="file-upload">
    <script inject="$modal,$formCheck">
        const target = $event.target;
        const app = Atom.app('LayoutTools');
        const sd = target.shadowRoot||target;
        const scope = {
            checkList:Object.keys($formCheck),
            checks:[],
            checkArgs:[],
            checkTips:[],
        };
        switch(target.localName){
            case 'cc-form':
            var form = sd.findOne('form');
            if(!form){
                form = ce('form');
                sd.append(form);
            }
            $modal.dialog()
            .content(app.getPaths('views/modal/fileupload.atom'))
            .scope(scope)
            .width(555)
            .height('auto')
            .ok(function(){
                // unwatch();
                // const nds = Atom.toNodes(scope.code());
                // const list = [...nds];
                // form.append(...nds);
                // undoList.push(function (){
                //     list.forEach(nd=>nd.remove());
                //     list.length=0;
                // });
            })
            .cancel(function (){
                // unwatch();
            });
            break;
        }
    </script>
</div>